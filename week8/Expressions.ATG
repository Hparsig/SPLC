/* Coco/R lexer and parser specification for arithmetic expressions. */
/* 2006-09-14 */

/* Build with:
 *   Coco.exe -namespace Expressions Expressions.ATG
 */

using System.Collections.Generic;

// Coco/R does not deal well with generics in arguments to nonterminals.
// allows us to use the names ListFormalArgs and ListExpr as abbreviation for List<Pair<String, Type>> and List<Expression> in our parser specification
using ListFormalArgs =
System.Collections.Generic.List<Expressions.Pair<System.String, Expressions.Type>>;
using ListExpr = System.Collections.Generic.List<Expressions.Expression>;
using ArgPair = Expressions.Pair<System.String, Expressions.Type>;

COMPILER Expressions
  public Program program;

/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.

IGNORE cr + lf + tab

PRODUCTIONS

/*------------------------------------------------------------------------*/
Program<out Program p>(.
    p = null;
    FuncDef f = null;
    String name = null;
    Expression e = null;
    Dictionary<String,FuncDef> functions = new Dictionary<string, FuncDef>();
.)

= {
  FuncDef<out f, out name>            (. functions.Add(name, f); .)
  }

  MainExpr<out e>                     (. p = new Program(functions, e); .)
.

/*------------------------------------------------------------------------*/
FuncDef<out FuncDef f, out String name>(.
  f = null;
  Expression e = null;
  Type rt = null;
  ListFormalArgs list;
  ListFormalArgs argList = new List<Pair<string, Type>>();
.)

= TypeExpr<out rt> Ident<out name> '('
  [
    Args<out list>                    (. argList = list; .)
  ]
  ')' '='
       MainExpr<out e>  ';'           (. f = new FuncDef(rt, name, argList, e); .)
.

/*------------------------------------------------------------------------*/

Args<out ListFormalArgs list>         (. string an; Type at; .)
= TypeExpr<out at> Ident<out an>(.
  list = new List<Pair<string, Type>>();
  list.Add(new Pair<string, Type>(an, at));
.)
{
  ','TypeExpr<out at> Ident<out an>  (. list.Add(new Pair<string, Type>(an, at)); .)
}
.

/*------------------------------------------------------------------------*/

TypeExpr<out Type t>                  (. t = null; .)
= "int"                               (. t = Type.intType; .)
| "bool"                              (. t = Type.boolType; .)
.

/*------------------------------------------------------------------------*/
MainExpr<out Expression e>            (. Expression e1; e = null; .)
= IfElseExpr <out e1>                 (. e = e1; .)
| LetExpr<out e1>                     (. e = e1; .)
| Expr<out e1>                        (. e = e1; .)
.

/*------------------------------------------------------------------------*/
IfElseExpr<out Expression e>          (. Expression e1, e2, e3; e = null; .)
= "if"    Expr<out e1> 
  "then"  Expr<out e2>
  "else"  Expr<out e3>                (. e = new IfElseExpr(e1, e2, e3); .)
.

/*------------------------------------------------------------------------*/
LetExpr<out Expression e>             (. Expression e1, e2; string name; e = null; .)
= "let"   Ident<out name> "=" Expr<out e1>
  "in"    InnerExpr<out e2> "end"     (. e = new LetExpr(name, e1, e2); .)
.

/*------------------------------------------------------------------------*/
InnerExpr<out Expression e>           (. Expression e1; e = null; .)
= Expr<out e1>                        (. e = e1; .)
| LetExpr<out e1>                     (. e = e1; .)
.


/*------------------------------------------------------------------------*/
Expr<out Expression e>                (. Expression e1, e2; Operator op; e = null; .)
= BoolTerm<out e1>                    (. e = e1; .)
  { AndOp<out op>
    BoolTerm<out e2>                  (. e = new BinOp(op, e, e2); .)
  }
.

AndOp<out Operator op>                (. op = Operator.Bad; .)
= '&'                                 (. op = Operator.And; .)
.

/*------------------------------------------------------------------------*/

BoolTerm<out Expression e>            (. Expression e1, e2; Operator op; e = null; .)
= SimBoolExpr<out e1>                 (. e = e1; .)
  { OrOp<out op>
    SimBoolExpr<out e2>               (. e = new BinOp(op, e, e2); .)
  }
.

OrOp<out Operator op>                 (. op = Operator.Bad; .)
= '|'                                 (. op = Operator.Or; .)
.

/*------------------------------------------------------------------------*/
SimBoolExpr<out Expression e>         (. Expression e1, e2; Operator op; e = null; .)
= SimExpr<out e1>                     (. e = e1; .)
  [ RelOp<out op>
    SimExpr<out e2>                   (. e = new BinOp(op, e, e2); .)
  ]
.

/*------------------------------------------------------------------------*/
SimExpr<out Expression e>             (. Expression e1, e2; Operator op; .)
= Term<out e1>                        (. e = e1; .)
  { AddOp<out op>
    Term<out e2>                      (. e = new BinOp(op, e, e2); .)
	}
.

/*------------------------------------------------------------------------*/
RelOp<out Operator op>                (. op = Operator.Bad; .)
= ( "=="                              (. op = Operator.Eq;  .)
  | "!="                              (. op = Operator.Ne;  .)
  | "<"                               (. op = Operator.Lt;  .)
  | "<="                              (. op = Operator.Le;  .)
  | ">"                               (. op = Operator.Gt;  .)
  | ">="                              (. op = Operator.Ge;  .)
  )
.

/*------------------------------------------------------------------------*/
Term<out Expression e>                (. Operator op; Expression e1, e2; .)
= Factor<out e1>                      (. e = e1;                         .)
  { MulOp<out op>
    Factor<out e2>                    (. e = new BinOp(op, e, e2);       .)
	}
.

/*------------------------------------------------------------------------*/
AddOp<out Operator op>                (. op = Operator.Bad; .)
= ( '+'                               (. op = Operator.Add; .)
  | '-'                               (. op = Operator.Sub; .)
  )
.

/*------------------------------------------------------------------------*/
/*
Factor<out Expression e>              (. String name; Expression e1; e = null; .)
= ( Ident<out name>                   (. e = new Variable(name); .)
     [ 
        '(' Expr<out e1> ')'          (. e = new FuncCall(name, e1); .)
     ]
  | number                            (. e = new Constant(Convert.ToInt32(t.val), 
                                               Type.intType); .)
  | '-' Factor<out e1>                (. e = new UnOp(Operator.Neg, e1); .)
  | '(' Expr<out e1> ')'              (. e = e1; .)
  )
.
*/

/*------------------------------------------------------------------------*/
Factor<out Expression e>
(.
  String name;
  Expression e1;
  e = null;
  ListExpr list = new List<Expression>();
.)

= ( Ident<out name>                   (. e = new Variable(name); .)
    [
      '(' [Params<out list>] ')'      (. e = new FuncCall(name, list); .)
    ]
  | number                            (. e = new Constant(Convert.ToInt32(t.val),
                                         Type.intType); .)
  | '-' Factor<out e1>                (. e = new UnOp(Operator.Neg, e1); .)
  | '(' MainExpr<out e1> ')'              (. e = e1; .)
  )
.

/*------------------------------------------------------------------------*/
Params<out ListExpr list>             (. Expression e1, e2; list = null; .)
= Expr<out e1>                        (. list = new List<Expression>(); list.Add(e1); .)
  {
    ','Expr<out e2>                   (. list.Add(e2); .)
  }
.

/*------------------------------------------------------------------------*/
MulOp<out Operator op>                (. op = Operator.Bad; .) 
= ( '*'                               (. op = Operator.Mul; .)
  | '/'                               (. op = Operator.Div; .)
  | '%'                               (. op = Operator.Mod; .)
  )
.

/*------------------------------------------------------------------------*/
Ident<out String name>
= ident                               (. name = t.val; .)
.

/*------------------------------------------------------------------------*/
Expressions                           (. Program p; .)
= Program<out p>                      (. program = p; .)
.
END Expressions.
